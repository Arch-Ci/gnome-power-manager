#!/bin/bash
#
# Tool to calculate the fdi entry in video-power-policy for geeky people
# that know what vbetool and s3_mode are.
#
# You can find the latest version of this script at:
#  http://cvs.gnome.org/viewcvs/*checkout*/gnome-power-manager/docs/calculate-video-fdi.sh
#
# Copyright 2006 Richard Hughes <richard@hughsie.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

tfile=$(mktemp /tmp/lshal.XXXXXX)
interface="org.freedesktop.Hal.Device.VideoAdapterPM"
keypref="video_adapter_pm"
fdidir="/usr/share/hal/fdi/policy/10osvendor"
fdifile="$fdidir/10-video-power-policy.fdi"
autogen_name="autogenerated_video.fdi"
output_file_root="$fdidir/$autogen_name"
output_file_user="$HOME/$autogen_name"
oldpid=""

convert_hex () {
	#converts decimal to hex
	printf "0x%X" $1
}

check_version () {
	# only allow 0.5.8 and 0.5.9 as HAL development is rapid
	if [ "$2" = "0.5.8" ]; then
		return
		fi
	if [ "$2" = "0.5.9" ]; then
		return
		fi
	echo "This script only supprts HAL versions 0.5.8 and 0.5.9!"
	exit
}

got_udi () {
	udi=$1
	# get info about this video adapter
	product=`hal-get-property --udi $udi --key pci.product`
	vendor=`hal-get-property --udi $udi --key pci.vendor`
	sub_product=`hal-get-property --udi $udi --key pci.subsys_product`
	sub_vendor=`hal-get-property --udi $udi --key pci.subsys_vendor`
	pid=`hal-get-property --udi $udi --key pci.product_id`
	pid=`convert_hex $pid`
	vid=`hal-get-property --udi $udi --key pci.vendor_id`
	vid=`convert_hex $vid`

	# subpid and subvid are almost at the dmi level anyway...
	subpid=`hal-get-property --udi $udi --key pci.subsys_product_id`
	subpid=`convert_hex $subpid`
	subvid=`hal-get-property --udi $udi --key pci.subsys_vendor_id`
	subvid=`convert_hex $subvid`

	# Some notebooks have 2 devices, both with the same pid - ignore the 2nd
	if [ "$oldpid" = "$pid" ]; then
		return
		fi
	oldpid=$pid

	# We only add the method if it's going to do something
	do_suspend_action=""
	do_resume_action=""
	echo "  <device>" >> $output_file
	echo "    <match key=\"pci.vendor_id\" int=\"$vid\"> <!-- $vendor -->" >> $output_file
	echo "      <match key=\"pci.product_id\" int=\"$pid\"> <!-- $product -->" >> $output_file
	echo "        <match key=\"pci.subsys_vendor_id\" int=\"$subvid\"> <!-- $sub_vendor -->" >> $output_file
	echo "          <match key=\"pci.subsys_product_id\" int=\"$subpid\"> <!-- $sub_product -->" >> $output_file
	if [ "$s3_bios" = "y" ]; then
		echo "            <merge key=\"$keypref.s3_bios\" type=\"bool\">true</merge>" >> $output_file
		do_suspend_action="true"
		fi
	if [ "$s3_mode" = "y" ]; then
		echo "            <merge key=\"$keypref.s3_mode\" type=\"bool\">true</merge>" >> $output_file
		do_suspend_action="true"
		fi
	if [ "$dpms_suspend" = "y" ]; then
		echo "            <merge key=\"$keypref.dpms_suspend\" type=\"bool\">true</merge>" >> $output_file
		do_suspend_action="true"
		fi
	if [ "$vga_mode_3" = "y" ]; then
		echo "            <merge key=\"$keypref.vga_mode_3\" type=\"bool\">true</merge>" >> $output_file
		do_resume_action="true"
		fi
	if [ "$dpms_on" = "y" ]; then
		echo "            <merge key=\"$keypref.dpms_on\" type=\"bool\">true</merge>" >> $output_file
		do_resume_action="true"
		fi
	if [ "$vbe_post" = "y" ]; then
		echo "            <merge key=\"$keypref.vbe_post\" type=\"bool\">true</merge>" >> $output_file
		do_resume_action="true"
		fi
	if [ "$vbestate_restore" = "y" ]; then
		echo "            <merge key=\"$keypref.vbestate_restore\" type=\"bool\">true</merge>" >> $output_file
		do_suspend_action="true"
		do_resume_action="true"
		fi
	if [ "$vbemode_restore" = "y" ]; then
		echo "            <merge key=\"$keypref.vbemode_restore\" type=\"bool\">true</merge>" >> $output_file
		do_suspend_action="true"
		do_resume_action="true"
		fi
	echo "            <append key=\"info.capabilities\" type=\"strlist\">video_adapter_pm</append>" >> $output_file
	echo "            <append key=\"info.interfaces\" type=\"strlist\">$interface</append>" >> $output_file
	if [ "$do_suspend_action" = "true" ]; then
		echo "            <append key=\"$interface.method_names\" type=\"strlist\">SuspendVideo</append>" >> $output_file
		echo "            <append key=\"$interface.method_signatures\" type=\"strlist\"></append>" >> $output_file
		echo "            <append key=\"$interface.method_execpaths\" type=\"strlist\">hal-system-video-suspend</append>" >> $output_file
		fi
	if [ "$do_resume_action" = "true" ]; then
		echo "            <append key=\"$interface.method_names\" type=\"strlist\">ResumeVideo</append>" >> $output_file
		echo "            <append key=\"$interface.method_signatures\" type=\"strlist\"></append>" >> $output_file
		echo "            <append key=\"$interface.method_execpaths\" type=\"strlist\">hal-system-video-resume</append>" >> $output_file
		fi
	echo "          </match>" >> $output_file
	echo "        </match>" >> $output_file
	echo "      </match>" >> $output_file
	echo "    </match>" >> $output_file
	echo "  </device>" >> $output_file
}

# If we are running as root we use the file in /usr/share/hal directly, if not
# we generate a file in the users home directory
if [ "$UID" = "0" ]; then
	output_file=$output_file_root
else
	output_file=$output_file_user
	fi

# Check if the temp fdi file already exists
if [ -e "$output_file" ]; then
	echo "file $output_file exists!"
	echo -n "Do you want to delete it? (y|n): " && read -e delete
	if [ "$delete" != "y" ]; then
		echo "File not deleted, exiting"
		exit
	else
		rm -f $output_file
		fi
	fi

# Check we are running new stable or CVS HAL
check_version `hal-get-property --version`

# Get all the device tree
lshal > $tfile

echo
echo "This is a tool for power users who know what S3_BIOS and VBEPOST mean..."
echo
echo "Here you will enter some information about what you already know about"
echo "suspending and resuming your videocard."
echo "You might also want to check you don't already have matched entries"
echo "for your card which you can check doing 'lshal | grep video_adapter_pm'"
echo
echo "Any information you don't know, just answer 'n' or press return"
echo
echo "Section 1/3 : Kernel parameters"
echo -n "Use S3_BIOS (y|n): " && read -e s3_bios
echo -n "Use S3_MODE (y|n): " && read -e s3_mode
echo
echo "Section 2/3 : Suspend actions"
echo -n "Use DPMS to force the screen off (y|n): " && read -e dpms_suspend
echo -n "Use vbestate restore (y|n): " && read -e vbestate_restore
echo -n "Use vbemode restore (y|n): " && read -e vbemode_restore
echo
echo "Section 3/3 : Resume actions"
echo -n "Set VGA text mode to mode 3 (y|n): " && read -e vga_mode_3
echo -n "Use DPMS to force the screen on (y|n): " && read -e dpms_on
echo -n "Use VGA vbe post (y|n): " && read -e vbe_post
echo

# Print some info so we can work out broken BIOS's or naughty OEM's
computer="/org/freedesktop/Hal/devices/computer"
system_manufacturer=`hal-get-property --udi $computer --key smbios.system.manufacturer`
system_product=`hal-get-property --udi $computer --key smbios.system.product`
bios_date=`hal-get-property --udi $computer --key smbios.bios.release_date`
bios_version=`hal-get-property --udi $computer --key smbios.bios.version`

echo "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <!-- -*- SGML -*- -->" > $output_file
echo "<deviceinfo version=\"0.2\">" >> $output_file

echo "  <!--" >> $output_file
echo "    system.manufacturer: $system_manufacturer" >> $output_file
echo "    system.product:      $system_product" >> $output_file
echo "    bios.release_date:   $bios_date" >> $output_file
echo "    bios.version:        $bios_version" >> $output_file
echo "  -->" >> $output_file

#do this because hal-find-by-property can't handle integers...
while read key equals value valuetype
do
	# find the UDI of pci.device_class = 3 (video adapter)
	if [ "$key" = "udi" ]; then
		#removes single quotes
		udi=`echo "$value" | awk '{$0.gsub("\047","");print $0;}'`
	fi
	if [ "$key" = "pci.device_class" ]; then
		class="$value"
	fi
	if [ "$key" = "" ]; then
		if [ "$class" = "3" ]; then
			got_udi $udi
		fi
		udi=""
		class=""
	fi
done < $tfile
rm $tfile

echo "</deviceinfo>" >> $output_file

if [ "$UID" = "0" ]; then
	echo "You are running this script as root, and the fdi file has been"
	echo "generated in $output_file_root"
else
	echo "You are not running this script as root, so you will need to manually copy"
	echo "$output_file_user to $output_file_root"
	output_file=$output_file_user
	fi

echo "You also need to restart haldaemon before testing the new FDI file"
echo
echo "If this fdi file gets things working for you then please send a copy of"
echo "$output_file_root"
echo "to richard@hughsie.com and I'll add it to upstream HAL -- thanks."
echo
